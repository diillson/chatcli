{
  "welcome.title": "Bringing Your Terminal Closer to Artificial Intelligence üïµÔ∏è‚Äç‚ôÇÔ∏è‚ú®",
  "welcome.tip.title": "Did You Know?",
  "welcome.footer.help.cmd": "/help",
  "welcome.footer.help.desc": "for all commands",
  "welcome.footer.exit.cmd": "/exit",
  "welcome.footer.exit.desc": "to quit",
  "welcome.footer.switch_model.cmd": "/switch --model",
  "welcome.footer.switch_model.desc": "to change model",
  "welcome.current_model": "ü§ñ You are chatting with %s (%s)",

  "tip.add_file": "Use '@file <path>' to add file content to the context.",
  "tip.git_context": "Use '@git' to include status and recent commits from your repository.",
  "tip.exec_command": "Need to run a command? Use '@command <your_command>'.",
  "tip.switch_provider": "Switch between AI providers at any time with the '/switch' command.",
  "tip.new_session": "Clear the history and start a new conversation with '/newsession'.",
  "tip.view_config": "Check your current configuration (no secrets!) with the '/config' command.",
  "tip.cancel_request": "Press Ctrl+C once to cancel an AI response without exiting the chat.",
  "tip.agent_mode": "Use agent mode with '/agent <task>' to have the AI execute commands for you.",
  "tip.agent_toggle_view": "In Agent Mode, use 'p' to toggle between COMPACT and FULL view.",
  "tip.agent_output_actions": "In Agent Mode, use 'vN' to open full output in pager and 'wN' to save to a file.",
  "tip.agent_last_result": "The 'Last Result' in Agent Mode is always anchored to the footer, no need to scroll.",

  "version.label": "Version: %s (commit: %s)",

  "help.header.title": "Complete Guide to ChatCLI Commands",
  "help.header.subtitle1": "Here is an exhaustive map of all available commands, subcommands, flags, and options.",
  "help.header.subtitle2": "Use them to control the application, add context, or automate tasks.",

  "help.section.general": "General Control",
  "help.command.help": "Shows this complete help screen.",
  "help.command.exit": "Exits the application.",
  "help.command.newsession": "Clears the current conversation history and starts a new session (alias for /session new).",
  "help.command.version": "Shows version, commit hash, build date, and checks for updates.",

  "help.section.config": "Configuration and AI Providers",
  "help.command.switch": "Opens the interactive menu to change the LLM provider (e.g., OPENAI, CLAUDEAI).",
  "help.command.switch_model": "Changes the model for the current provider (e.g., gpt-4o-mini, grok-4, gpt-5... etc).",
  "help.command.switch_model_example": "(Changes to the GPT-4o Mini model on OpenAI)",
  "help.command.switch_max_tokens": "Sets the maximum tokens for the next responses (0 for provider default).",
  "help.command.switch_realm": "Updates the 'realm/tenant' (StackSpot only).",
  "help.command.switch_agent_id": "Updates the 'Agent ID' (StackSpot only).",
  "help.command.config": "Displays the current configuration (provider, model, keys, etc.).",
  "help.command.reload": "Reloads the configuration variables from your .env file in real-time.",

  "help.section.context": "Adding Context to Prompts",
  "help.command.file": "Adds the content of a file or directory to the prompt.",
  "help.command.file_mode_full": "(Default) Sends the full content, truncating if necessary.",
  "help.command.file_mode_chunked": "For large projects, splits content into manageable chunks.",
  "help.command.file_mode_summary": "Sends only the file structure, without the content.",
  "help.command.file_mode_smart": "The AI selects the most relevant files for your question.",
  "help.command.file_mode_example": "Ex: @file --mode=smart ./src How does login work?",
  "help.command.git": "Adds status, branch, remotes, and recent Git commits.",
  "help.command.history": "Adds the last commands from your shell history (bash/zsh/fish).",
  "help.command.env": "Adds environment variables (sensitive values are redacted).",

  "help.section.chunks": "Large File Management (Chunks)",
  "help.command.nextchunk": "Sends the next project chunk to the AI.",
  "help.command.retry": "Tries to resend the last failed chunk.",
  "help.command.retryall": "Tries to resend all failed chunks.",
  "help.command.skipchunk": "Skips a chunk with an error and proceeds to the next.",

  "help.section.exec": "Executing Terminal Commands",
  "help.command.command": "Executes a command and adds its output to the prompt.",
  "help.command.command_example": "(Executes 'ls -la' and appends the result)",
  "help.command.command_i": "Executes an interactive command (e.g., vim) without adding output to the prompt.",
  "help.command.command_ai": "Executes a command and sends the output DIRECTLY to the AI.",
  "help.command.command_ai_example": "(Sends git diff for AI analysis)",
  "help.command.command_ai_context": "Same as above, but adds context/question.",
  "help.command.command_ai_context_example": "Ex: @command --ai cat err.log > summarize this error",

  "help.section.agent": "Agent Mode (Task Execution)",
  "help.command.agent": "Asks the AI to plan and execute commands to solve a task.",
  "help.command.run": "An alias for the /agent command.",
  "help.command.agent_example": "Ex: /agent list all .go files and count their lines",
  "help.command.agent_inside": "Inside agent mode:",
  "help.command.agent_exec_n": "Executes a specific command (e.g., 1 for the first).",
  "help.command.agent_exec_all": "Executes ALL suggested commands in sequence.",
  "help.command.agent_edit": "Edits command N before executing (e.g., e1).",
  "help.command.agent_dry_run": "Simulates (dry-run) command N (e.g., t2).",
  "help.command.agent_continue": "Asks AI for continuation with the output of command N (e.g., c2).",
  "help.command.agent_pre_context": "Adds context to command N BEFORE executing (e.g., pc1).",
  "help.command.agent_post_context": "Adds context to the OUTPUT of command N (e.g., ac1).",
  "help.command.agent_view": "Opens the full output of command N in pager (less -R/more).",
  "help.command.agent_save": "Saves the output of command N to a temporary file.",
  "help.command.agent_toggle_plan": "Toggles plan view: COMPACT ‚Üî FULL.",
  "help.command.agent_redraw": "Refreshes the screen (clear + redraw).",
  "help.command.agent_quit": "Exits agent mode.",
  "help.command.agent_notes": "Notes:",
  "help.command.agent_last_result": "‚Ä¢ Last Result is always anchored to the footer (preview).",
  "help.command.agent_compact_plan": "‚Ä¢ COMPACT Plan shows 1 line per command (status + desc + 1st code line).",
  "help.command.agent_full_plan": "‚Ä¢ FULL Plan shows a card with description, type, risk, and formatted code block.",

  "help.section.sessions": "Session Management",
  "help.command.session_save": "Saves the current session with a name (e.g., /session save my-chat).",
  "help.command.session_load": "Loads a saved session (e.g., /session load my-chat).",
  "help.command.session_list": "Lists all saved sessions.",
  "help.command.session_delete": "Deletes a saved session (e.g., /session delete my-chat).",
  "help.command.session_new": "Starts a new clean session (alias for /newsession).",

  "help.section.oneshot": "Non-Interactive Mode (One-Shot, for scripts and pipes)",
  "help.command.oneshot_p": "Executes a prompt once and exits.",
  "help.command.oneshot_p_example": "Ex: chatcli -p \"Explain this repository.\"",
  "help.command.oneshot_prompt": "Alias for -p.",
  "help.command.oneshot_provider": "Overrides the provider (e.g., --provider OPENAI).",
  "help.command.oneshot_model": "Overrides the model (e.g., --model gpt-4o-mini).",
  "help.command.oneshot_agent_id": "Overrides agent (stackSpot only)-(e.g. --agent-id 1290XSBD00384).",
  "help.command.oneshot_max_tokens": "Overrides the maximum tokens for the response.",
  "help.command.oneshot_timeout": "Timeout for the call command (e.g., --timeout 5m, default: 5m).",
  "help.command.oneshot_no_anim": "Disables animations (useful in scripts/CI).",
  "help.command.oneshot_auto_exec": "In one-shot agent mode, automatically executes the first suggested command if safe.",
  "help.command.oneshot_pipes": "Piping (stdin): Send data via pipe (e.g., git diff | chatcli -p \"Summarize changes.\").",

  "help.section.tips": "General Tips and Shortcuts",
  "help.command.tips_cancel": "Cancel (Ctrl+C): Press Ctrl+C once during 'Thinking...' to cancel.",
  "help.command.tips_exit": "Quick Exit (Ctrl+D): Press Ctrl+D on an empty prompt to exit ChatCLI.",
  "help.command.tips_operator": "Operator '>': Use '>' to add context to prompts (e.g., @git > Create a release note).",
  "help.command.tips_agent_p": "Agent Mode: p - Toggles COMPACT/FULL plan (useful to focus on the flow).",
  "help.command.tips_agent_v": "Agent Mode: vN - Opens command N's output in pager (for long reads without clutter).",
  "help.command.tips_agent_w": "Agent Mode: wN - Saves command N's output to a temp file (to share or attach).",
  "help.command.tips_agent_r": "Agent Mode: r - Redraws the screen (clear) keeping focus on 'Last Result'.",

  "status.reloading_config": "Reloading configurations...",
  "status.reload_success_preserved": "Configurations reloaded successfully! (current provider/model preserved)",
  "status.reload_fail_preserve": "Failed to preserve provider/model after reload; falling back to .env values",
  "status.reload_success": "Configurations reloaded successfully!",
  "status.reload_fail_client": "Failed to reconfigure LLM client after reload.",
  "status.operation_cancelled": "üõë Operation canceled successfully!",
  "status.provider_switched": "Switched to %s (%s)",
  "status.exiting": "Goodbye!",
  "status.agent_mode_enter": "\nü§ñ Entering agent mode with query: \"%s\"\n",
  "status.agent_mode_description": "The agent will analyze your request and suggest commands to solve it.",
  "status.agent_mode_exit": "\n ‚úÖ Returning to chat...",

  "prompt.select_provider": "Choose the provider (by number): ",
  "prompt.confirm_exit": "\nGoodbye!! Double CTRL+C...",
  "prompt.cancel_op": "\n‚ö†Ô∏è Ctrl+C triggered - Canceling operation...",

  "error.generic": "‚ùå Error: %s",
  "error.invalid_choice_normal_mode": "Invalid choice. Returning to normal mode.",
  "error.unknown_command": "Unknown command. Use /help to see available commands.",
  "error.agent_query_extraction": "Error: could not extract agent query.",
  "error.agent_mode_error": " ‚ùå Error in agent mode: %v",

  "session.new_session_started": "New conversation session started; history has been cleared.",
  "session.usage_header": "Usage of /session command:",
  "session.usage_save": "  /session save <name>",
  "session.usage_load": "  /session load <name>",
  "session.usage_list": "  /session list",
  "session.usage_delete": "  /session delete <name>",
  "session.usage_new": "  /session new",
  "session.error_save": " ‚ùå Error saving session: %v",
  "session.save_success": " ‚úÖ Session '%s' saved successfully.",
  "session.error_load": " ‚ùå Error loading session: %v",
  "session.load_success": " ‚úÖ Session '%s' loaded. The previous conversation has been restored.",
  "session.error_list": " ‚ùå Error listing sessions: %v",
  "session.list_empty": "No saved sessions found.",
  "session.list_header": "Saved sessions:",
  "session.error_delete": " ‚ùå Error deleting session: %v",
  "session.delete_success": " ‚úÖ Session '%s' successfully deleted from disk.",
  "session.delete_active_cleared": "The current session was cleared. You are in a new conversation.",
  "session.error_name_required_save": "Error: a name is required to save the session.",
  "session.error_name_required_load": "Error: a name is required to load the session.",
  "session.error_name_required_delete": "Error: a name is required to delete the session.",
  "session.unknown_command": "Unknown session command: '%s'. Use /session to see options.",

  "chunk.no_more_chunks": "There are no more file chunks available.",
  "chunk.no_more_pending_but_failed": "There are no more pending chunks, but there are %d failed chunks. Use /retry to retry the last failed chunk or /retryall to retry all.",
  "chunk.sending": "Sending chunk %d of %d... (%d remaining after this one)",
  "chunk.progress_header": "üìä PROGRESS: Chunk %d/%d",
  "chunk.progress_processed": "‚ñ∂Ô∏è %d chunks already processed",
  "chunk.progress_pending": "‚ñ∂Ô∏è %d pending chunks",
  "chunk.progress_failed": "‚ñ∂Ô∏è %d failed chunks",
  "chunk.progress_usage": "‚ñ∂Ô∏è Use '/nextchunk' to advance or '/retry' if a failure occurs",
  "chunk.prompt": "This is chunk %d/%d of the code I requested earlier. Please continue the analysis:",
  "chunk.error_processing": "\n‚ö†Ô∏è Error processing chunk %d/%d: %s",
  "chunk.moved_to_failed_queue": "The chunk has been moved to the failed chunks queue.",
  "chunk.retry_or_next": "Use /retry to try this chunk again or /nextchunk to continue with the next one.",
  "chunk.status_header": "\nChunk status:",
  "chunk.status_pending": "- %d pending chunks. Use /nextchunk to continue.",
  "chunk.status_failed": "- %d failed chunks. Use /retry or /retryall to reprocess them.",
  "chunk.all_processed_success": "\nAll chunks have been processed successfully.",
  "chunk.no_failed_to_retry": "There are no failed chunks to reprocess.",
  "chunk.retrying_last_failed": "Retrying chunk %d/%d that failed previously...",
  "chunk.retry_header": "üìä NEW ATTEMPT: Chunk %d/%d",
  "chunk.retry_status_retrying": "‚ñ∂Ô∏è Retrying a previously failed chunk",
  "chunk.retry_status_other_failed": "‚ñ∂Ô∏è %d other failed chunks",
  "chunk.retry_prompt": "This is chunk %d/%d of the code (new attempt after failure). Please continue the analysis:",
  "chunk.retry_error": "\n‚ö†Ô∏è Error reprocessing chunk %d/%d: %s",
  "chunk.retry_remains_failed": "The chunk remains in the failed chunks queue.",
  "chunk.retry_success": "\nChunk reprocessed successfully!",
  "chunk.retrying_all_failed": "Retrying all %d failed chunks...",
  "chunk.no_pending_to_skip": "There are no pending chunks to skip.",
  "chunk.skipping": "Skipping chunk %d/%d...",
  "chunk.status_no_pending": "- No pending chunks.",
  "chunk.status_no_failed": "- No failed chunks.",

  "agent.header.title": "ü§ñ AGENT MODE: ACTION PLAN",
  "agent.header.description": "The AI has suggested the following commands to perform your task.",
  "agent.plan.compact_view": "üìã PLAN (compact view)",
  "agent.plan.full_view": "üìã PLAN (full view)",
  "agent.plan.status.pending": "Pending",
  "agent.plan.status.ok": "OK",
  "agent.plan.status.error": "ERROR",
  "agent.plan.risk.dangerous": "‚ö†Ô∏è Potentially dangerous",
  "agent.plan.risk.safe": "Safe",
  "agent.plan.command_header": "üî∑ COMMAND #%d: %s",
  "agent.plan.field.type": "Type:",
  "agent.plan.field.risk": "Risk:",
  "agent.plan.field.status": "Status:",
  "agent.plan.field.code": "Code:",
  "agent.plan.command_separator": "( %d / %d )",
  "agent.plan.default_description": "Execute commands",
  "agent.last_result.header": "üßæ LAST RESULT",
  "agent.last_result.tips": "Tips: v%d = view full | w%d = save to file | Enter = continue",
  "agent.menu.header": "WHAT DO YOU WANT TO DO?",
  "agent.menu.exec_n": "Executes a specific command (e.g., 1, 2, ...)",
  "agent.menu.exec_all": "Executes all commands in sequence",
  "agent.menu.edit": "Edits command N (e.g., e1)",
  "agent.menu.dry_run": "Simulates (dry-run) command N (e.g., t2)",
  "agent.menu.continue": "Asks AI for continuation with the output of N (e.g., c2)",
  "agent.menu.pre_context": "Adds pre-context to N before executing (e.g., pc1)",
  "agent.menu.post_context": "Adds context to the OUTPUT of N (e.g., ac1)",
  "agent.menu.view": "View full output of N in pager",
  "agent.menu.save": "Save output of N to a file",
  "agent.menu.toggle_plan": "Toggles full/compact plan",
  "agent.menu.redraw": "Refreshes the screen (clear)",
  "agent.menu.quit": "Exits Agent Mode",
  "agent.prompt.choice": "\n ‚û§ Your choice: ",

  "agent.status.exiting": "\n ‚úÖ Exiting agent mode.",
  "agent.status.no_output_to_show": "No output to display.",
  "agent.status.no_output_to_save": "No output to save.",
  "agent.status.press_enter": "\nPress Enter to continue...",
  "agent.status.error_saving": "Error saving:",
  "agent.status.file_saved_at": "File saved at:",
  "agent.status.batch_warning": "‚ö†Ô∏è WARNING: One or more commands are potentially dangerous.",
  "agent.status.batch_check_individual": "Check individual commands before approving batch execution!",
  "agent.status.batch_confirm": "\n‚ö†Ô∏è Execute all commands in sequence? (y/N): ",
  "agent.status.batch_cancelled": "Batch execution canceled.",
  "agent.status.executing_command": "\nüöÄ Executing command #%d:",
  "agent.status.all_commands_executed": "\n‚úÖ All commands have been executed.",
  "agent.status.summary": "\nSummary:",
  "agent.status.command_not_executed": "This command has not been executed yet.",
  "agent.status.context_received": "\nContext received! Requesting refinement from AI...",
  "agent.status.no_new_commands": "\nThe AI did not suggest new commands.",
  "agent.status.executing": "üöÄ EXECUTING: %s",
  "agent.status.executing_script": "‚öôÔ∏è Executing script via %s:",
  "agent.status.dir_changed": "üìÇ Directory changed to: %s",
  "agent.status.dangerous_command_confirm": "This command is potentially dangerous. To confirm, type: 'yes, I want to run this knowingly'\nConfirm?: ",
  "agent.status.dangerous_command_aborted": "Execution of dangerous command ABORTED.",
  "agent.status.dangerous_command_confirmed": "‚ö†Ô∏è Confirmation received. Executing...",
  "agent.status.executing_command_n": "‚öôÔ∏è Command %d/%d: %s",
  "agent.status.interactive_mode": "üñ•Ô∏è  Interactive mode.",
  "agent.status.command_finished": "‚úì Command finished.",
  "agent.status.execution_complete": " ‚úÖ Execution Completed ",
  "agent.status.execution_complete_with_errors": " ‚ö†Ô∏è Execution Completed with Errors ",
  "agent.status.simulating_commands": "\nüîé Simulating commands (type: %s):",
  "agent.status.simulation_done": "Simulation finished, command NOT executed.",
  "agent.status.confirm_exec_after_sim": "Do you want to execute this command now? (y/N): ",
  "agent.status.edit_prompt": "Edit in terminal (t) or external editor (e)? [t/e]: ",
  "agent.status.edit_command_prompt": "Command %d/%d (%s): ",
  "agent.status.interactive_confirm": "The command '%s' might be interactive. Run in interactive mode? (y/N): ",

  "agent.error.invalid_command_number": "Invalid command number.",
  "agent.error.invalid_command_number_edit": "Invalid command number to edit.",
  "agent.error.invalid_command_number_simulate": "Invalid command number to simulate.",
  "agent.error.invalid_command_number_context": "Invalid number to add context.",
  "agent.error.invalid_command_number_continue": "Invalid number for continuation.",
  "agent.error.error_editing_command": "Error editing command:",
  "agent.error.no_context_provided": "No context provided. Operation canceled.",
  "agent.error.refinement_failed": "Error requesting refinement from AI:",
  "agent.error.continuation_failed": "Error asking AI for continuation:",
  "agent.error.create_temp_file": "‚ùå Error creating temporary file: %v",
  "agent.error.write_script": "‚ùå Error writing script: %v",
  "agent.error.change_dir": "‚ùå Error changing directory to '%s': %v",
  "agent.error.invalid_option": "Invalid option.",

  "agent.oneshot.no_command": "\nNo executable command was suggested by the AI.",
  "agent.oneshot.header": "\nü§ñ AGENT MODE (ONE-SHOT): Suggested Command",
  "agent.oneshot.header_auto_exec": "\nü§ñ AGENT MODE (ONE-SHOT): Automatic Execution",
  "agent.oneshot.auto_exec_tip": "To execute automatically, use the --agent-auto-exec flag",
  "agent.oneshot.block_header": "\nüî∑ Command Block: %s",
  "agent.oneshot.language": "  Language: %s",
  "agent.oneshot.auto_exec_aborted": "automatic execution aborted for safety. The suggested command is potentially dangerous: %q",
  "agent.oneshot.auto_exec_running": "‚úÖ Safe command detected. Executing the suggested command...",
  "agent.oneshot.error_with_output": "the command was executed, but returned an error: %s",

  "oneshot.error_overrides": "‚ùå Error applying provider/model overrides",


  "agent.system_prompt.interactive": "You are a command-line assistant that helps the user perform tasks on the system safely. Always briefly explain the purpose before the commands. Prefer simple, non-interactive commands. Avoid potentially destructive commands (rm -rf, dd, mkfs, etc.) without a clear risk warning and safe alternatives. When suggesting executable commands, use code blocks exactly in the format:\n\n```execute:<type>\n<commands>\n```\n\nAccepted types: shell, git, docker, kubectl. If there is ambiguity, ask a question before providing commands.",
  "agent.system_prompt.default.base": "You are an expert command-line assistant, operating inside a terminal. Your goal is to help the user perform tasks safely and efficiently by providing the correct commands.\n\n**[Available Context]**\n- Operating System: %s\n- Default Shell: %s\n- Current Directory: %s\n\n**[MANDATORY PROCESS]**\nFor each user request, you MUST strictly follow these two steps:\n\n**Step 1: Planning**\nThink step-by-step internally. If necessary, summarize the reasoning in a <reasoning> tag to show the user.\n\n**Step 2: Structured Final Response**\nAfter reasoning, provide the final response containing:\n1. A <explanation> tag with a clear and concise explanation of what the commands will do.\n2. One or more code blocks in the example format (the actual example block is injected below).\n\n**[GUIDELINES AND RESTRICTIONS]**\n1. Safety First: NEVER suggest destructive commands ('rm -rf', 'dd', 'mkfs', etc.) without an explicit warning about the risks in the <explanation> tag.\n2. Clarity: Prefer commands that are easy to understand. If a command is complex (e.g., 'awk', 'sed'), explain each part of it.\n3. Efficiency: Use pipes ('|') and combine commands to create efficient solutions when appropriate.\n4. Interactivity: Avoid interactive commands (e.g., 'vim', 'nano', 'ssh' without arguments). If necessary, warn the user in the <explanation> and add the #interactive marker at the end of the command (e.g., 'ssh user@host #interactive') so the CLI can handle it as interactive.\n5. Ambiguity: If the user's request is ambiguous, ask a clarifying question instead of guessing. DO NOT provide an execute block in that case.\n6. Format: Use execute:<type> code blocks as per the example injected below.\n\n**[COMPLETE EXAMPLE]**\n\n**User Request:** \"list all go files in this project and count the lines of each one\"\n\n**Your Response:**\n<reasoning>\n1. The user wants to find all files with the .go extension. The 'find' command is ideal for this.\n2. The search starting point should be the current directory ('.').\n3. The search criterion is the file name, so I'll use: find . -name \"*.go\"\n4. For each file found, the user wants to count the lines. The 'wc -l' command does this.\n5. I need to combine find with wc -l. The best way to do this for multiple files is using xargs or the -exec option of find. The -exec option with + is efficient.\n6. The final command will be: find . -name \"*.go\" -exec wc -l {} +\n</reasoning>\n<explanation>\nI will use the 'find' command to recursively search for all files ending with .go from the current directory. Then, for each file found, I will execute the 'wc -l' command to count the number of lines.\n</explanation>\n\nExample command block (format shown below):",
  "agent.system_prompt.oneshot": "You are a command-line assistant operating in a single-execution (one-shot) mode. Your task is to analyze the user's request and provide **a single, concise command block** that solves the task as efficiently and safely as possible.\n\n- Respond **only** with the best command block in the ```execute:shell format.\n- **Do not** provide multiple command blocks or alternatives.\n- **Do not** add long explanations before or after, just the command needed for execution.\n- Avoid destructive commands (like rm -rf) unless explicitly requested and the intent is clear.\n- The command must be directly executable, as we only need one, the best and most expert command possible.",

  "agent.llm_prompt.continuation": "The previously suggested command was:\n%s\n\nThe result (stdout) was:\n%s\n\nThe error (stderr) was:\n%s\n\nPlease suggest a correction or next steps based on the result. Provide executable commands in the appropriate format.",
  "agent.llm_prompt.continuation_with_context": "The previously suggested command was:\n%s\n\nThe result (stdout) was:\n%s\n\nThe error (stderr) was:\n%s\n\nPlease suggest a correction or next steps based on the result and the provided context. Provide executable commands in the appropriate format.\n\nAdditional context provided by the user:\n%s",
  "agent.llm_prompt.pre_execution_context": "The command you suggested was:\n```\n%s\n```\n\nBefore executing it, the user provided the following additional context or instruction:\n%s\n\nPlease review the suggested command based on this new context. If necessary, modify it or suggest a new set of commands. Present the new commands in the appropriate executable format.",

  "main.warn_expand_path": "Warning: could not expand path '%s': %v",
  "main.error_dotenv_not_found": ".env file not found at %s",
  "main.error_logger_init": "Could not initialize logger: %v",
  "main.error_no_provider": "No LLM provider is configured. Check your environment variables.",
  "main.error_apply_overrides": " ‚ùå Error applying overrides: %v",
  "manager.error_provider_not_supported": "LLM Provider '%s' not supported or not configured",

  "cli.switch.invalid_max_tokens": " ‚ùå Invalid value for --max-tokens: '%s'. Must be a number >= 0.",
  "cli.switch.max_tokens_set": " ‚úÖ Maximum token limit set to: %d (0 = use provider default)",
  "cli.switch.stackspot_only_flags": " ‚ùå Flags --realm and --agent-id can only be used with the STACKSPOT provider.",
  "cli.switch.realm_updated": " ‚úÖ StackSpot realm/tenant updated to '%s'. The token will be renewed on the next request.",
  "cli.switch.agent_id_updated": " ‚úÖ StackSpot Agent ID updated to '%s'.",
  "cli.switch.agent_id_error": " ‚ùå Error recreating StackSpot client with new Agent ID: %v",
  "cli.switch.changing_model": "Attempting to switch to model '%s' on provider '%s'...",
  "cli.switch.change_model_error": " ‚ùå Error switching to model '%s': %v\n   Verify that the model name is correct for the current provider.",
  "cli.switch.change_model_success": " ‚úÖ Successfully switched model to %s (%s)",
  "cli.switch.available_providers": "Available providers:",

  "cli.config.header": "Current ChatCLI Configuration",
  "cli.config.subtitle": "Here is a summary of runtime settings, providers, and environment variables.",
  "cli.config.section_general": "General Settings",
  "cli.config.key_dotenv_file": "DotEnv File",
  "cli.config.key_env": "Environment (ENV)",
  "cli.config.key_log_level": "Log Level (LOG_LEVEL)",
  "cli.config.key_log_file": "Log File (LOG_FILE)",
  "cli.config.key_log_max_size": "Log Max Size (LOG_MAX_SIZE)",
  "cli.config.key_history_max_size": "History Max Size (HISTORY_MAX_SIZE)",
  "cli.config.section_current_provider": "Current Provider and Model",
  "cli.config.key_provider_runtime": "Provider (Runtime)",
  "cli.config.key_model_runtime": "Model (Runtime)",
  "cli.config.key_model_name_client": "Model Name (Client)",
  "cli.config.key_preferred_api": "Preferred API (Catalog)",
  "cli.config.key_effective_max_tokens": "Effective MaxTokens",
  "cli.config.section_max_tokens_overrides": "MaxTokens Overrides per Provider (ENV)",
  "cli.config.section_sensitive_keys": "Sensitive Keys (Presence Only)",
  "cli.config.key_client_id_stackspot": "CLIENT_ID (StackSpot)",
  "cli.config.key_client_key_stackspot": "CLIENT_KEY (StackSpot)",
  "cli.config.section_provider_settings": "Settings per Provider",
  "cli.config.key_stackspot_realm": "STACKSPOT Realm/Tenant (Runtime)",
  "cli.config.key_stackspot_agent_id": "STACKSPOT Agent ID (Runtime)",
  "cli.config.section_available_providers": "Available Providers",
  "cli.config.key_provider_n": "Provider %d",
  "cli.config.no_providers_configured": "None configured. Set API keys in .env",

  "agent.validator.empty_command": "empty command",
  "agent.validator.dangerous_command": "potentially dangerous command detected: %s",

  "agent.executor.interactive_mode_header": "\n--- Entering interactive command mode ---",
  "agent.executor.interactive_mode_info": "Terminal control will be passed to the command.",
  "agent.executor.interactive_mode_exit_tip": "To return, exit the program (e.g., ':q' in vim, 'exit' in shell).",
  "agent.executor.interactive_mode_footer": "--- Returning to ChatCLI ---",
  "agent.executor.fail_restore_terminal": "Failed to restore terminal",

  "help.section.contexts": "Context Management",
  "help.command.context_create": "Create new context from files/directories",
  "help.command.context_mode": "Processing mode (full, summary, chunked, smart)",
  "help.command.context_description": "Context description",
  "help.command.context_tags": "Comma-separated tags",
  "help.command.context_attach": "Attach context to current session",
  "help.command.context_detach": "Detach context from session",
  "help.command.context_list": "List all saved contexts",
  "help.command.context_show": "Show context details",
  "help.command.context_delete": "Delete a context permanently",
  "help.command.context_merge": "Merge multiple contexts into a new one",
  "help.command.context_attached": "Show contexts attached to current session",
  "help.command.context_export": "Export context to JSON file",
  "help.command.context_import": "Import context from JSON file",
  "help.command.context_metrics": "Show usage metrics and statistics",

  "context.error.unknown_subcommand": "Unknown subcommand: '%s'. Use /context help to see available commands.",

  "context.create.usage": "Usage: /context create <name> <paths...> [--mode <mode>] [--description <text>] [--tags <tag1,tag2>]",
  "context.create.error.mode_required": "Flag --mode requires a value (full, summary, chunked, smart)",
  "context.create.error.description_required": "Flag --description requires a value",
  "context.create.error.tags_required": "Flag --tags requires comma-separated values",
  "context.create.error.no_paths": "No paths provided. At least one file or directory is required.",
  "context.create.error.failed": "Error creating context: %v",
  "context.create.processing": " üîÑ Processing files...",
  "context.create.success": " ‚úÖ Context created successfully!",

  "context.attach.usage": "Usage: /context attach <name> [--priority <number>]",
  "context.attach.error.invalid_priority": "Invalid priority. Must be an integer.",
  "context.attach.error.not_found": "Context '%s' not found",
  "context.attach.error.failed": "Error attaching context: %v",
  "context.attach.success": " ‚úÖ Context '%s' attached to current session",
  "context.attach.priority": "Priority:",
  "context.attach.files": "Files:",
  "context.attach.files_label": "files",
  "context.attach.size": "Size:",

  "context.detach.usage": "Usage: /context detach <name>",
  "context.detach.error.not_found": "Context '%s' not found",
  "context.detach.error.failed": "Error detaching context: %v",
  "context.detach.success": " ‚úÖ Context '%s' detached from session",

  "context.delete.usage": "Usage: /context delete <name>",
  "context.delete.error.not_found": "Context '%s' not found",
  "context.delete.error.failed": "Error deleting context: %v",
  "context.delete.confirm": " ‚ö†Ô∏è  Are you sure you want to delete context '%s'? (y/N): ",
  "context.delete.cancelled": "Operation cancelled.",
  "context.delete.success": " ‚úÖ Context '%s' deleted successfully",

  "context.list.error.failed": "Error listing contexts: %v",
  "context.list.empty": "No contexts found. Use /context create to create one.",
  "context.list.header": " üì¶ AVAILABLE CONTEXTS",

  "context.show.usage": "Usage: /context show <name>",
  "context.show.error.not_found": "Context '%s' not found",

  "context.merge.usage": "Usage: /context merge <new-name> <context1> <context2> [context3...]",
  "context.merge.error.context_not_found": "Context '%s' not found",
  "context.merge.error.failed": "Error merging contexts: %v",
  "context.merge.processing": " üîÑ Merging contexts...",
  "context.merge.success": " ‚úÖ Contexts merged successfully!",

  "context.attached.error.failed": "Error fetching attached contexts: %v",
  "context.attached.empty": "No contexts attached to this session. Use /context attach <name> to attach.",
  "context.attached.header": " üìå CONTEXTS ATTACHED TO SESSION",

  "context.export.usage": "Usage: /context export <name> <target-path>",
  "context.export.error.not_found": "Context '%s' not found",
  "context.export.error.failed": "Error exporting context: %v",
  "context.export.success": " ‚úÖ Context exported to: %s",

  "context.import.usage": "Usage: /context import <file-path>",
  "context.import.error.failed": "Error importing context: %v",
  "context.import.success": " ‚úÖ Context '%s' imported successfully",

  "context.metrics.header": " üìä CONTEXT METRICS"
}