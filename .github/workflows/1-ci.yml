name: CI (Lint, Fmt, Test)

on:
  pull_request:
    branches: [develop, main]

concurrency:
  group: ci-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    if: github.actor != 'release-please[bot]' && github.actor != 'github-actions[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Check gofmt
        run: |
          output=$(gofmt -l .)
          if [ -n "$output" ]; then
            echo "::error file=gofmt::The following files are not formatted:"
            echo "$output"
            exit 1
          fi

      - name: Go vet
        run: go vet ./...

      - name: Run unit tests and generate coverage report
        id: coverage # Adiciona um ID para referenciar a sa√≠da deste passo
        run: |
          # Gera o perfil de cobertura
          go test -race -coverprofile=coverage.out ./...
          # Gera o resumo em texto a partir do perfil
          go tool cover -func=coverage.out > coverage.txt
          # Extrai a porcentagem total da √∫ltima linha e a exp√µe como uma sa√≠da do passo
          COVERAGE=$(tail -n 1 coverage.txt | awk '{print $3}')
          echo "total_coverage=${COVERAGE}" >> $GITHUB_OUTPUT

      - name: Post or Update Coverage Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const coverage = "${{ steps.coverage.outputs.total_coverage }}";
            const header = "### üìä Go Test Coverage";
            const body = `${header}\n\n**Total Coverage:** \`${coverage}\``;
            
            // 1. Lista os coment√°rios existentes no PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // 2. Procura por um coment√°rio antigo do bot com o mesmo cabe√ßalho
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && comment.body.startsWith(header)
            );
            
            // 3. Se encontrar um coment√°rio, atualiza. Se n√£o, cria um novo.
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
              core.info(`Updated coverage comment (ID: ${botComment.id}).`);
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
              core.info('Created a new coverage comment.');
            }

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
