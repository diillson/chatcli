name: Release from develop and PR to main

on:
  push:
    branches: ["develop"]

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: release-develop
  cancel-in-progress: true

jobs:
  release-please:
    name: Create tag and GitHub release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release.outputs.tag_name }}
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - name: Release Please (github-release)
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: go
          skip-github-pull-request: true
          token: ${{ secrets.GH_RELEASE_TOKEN }}

  build-and-upload-assets:
    name: Build and upload binaries to release
    needs: [release-please]
    if: needs.release-please.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build binaries
        env:
          CGO_ENABLED: 0
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          VERSION=${{ needs.release-please.outputs.tag_name }}
          LDFLAGS="-X 'github.com/diillson/chatcli/version.Version=${VERSION}' -X 'github.com/diillson/chatcli/version.CommitHash=${COMMIT_HASH}' -X 'github.com/diillson/chatcli/version.BuildDate=${BUILD_DATE}'"
          
          GOOS=linux   GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o chatcli-linux-amd64     ./main.go
          GOOS=darwin  GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o chatcli-darwin-amd64    ./main.go
          GOOS=darwin  GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o chatcli-darwin-arm64    ./main.go
          GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o chatcli-windows-amd64.exe ./main.go
          
          ./chatcli-linux-amd64 --version || true

      - name: Update Release with Binaries
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: |
            chatcli-linux-amd64
            chatcli-darwin-amd64
            chatcli-darwin-arm64
            chatcli-windows-amd64.exe
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}

  open-pr-develop-to-main:
    name: Open PR develop -> main
    needs: [release-please]
    if: needs.release-please.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Open or reuse PR develop -> main
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_RELEASE_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = `${owner}:develop`;
            const base = 'main';
            
            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', head, base, per_page: 10
            });
            
            if (prs.length > 0) {
              core.info(`PR já existe: ${prs[0].number}`);
              return;
            }
            
            const title = `Merge develop into main (${process.env.TAG_NAME})`;
            const body  = `PR automático após a release ${process.env.TAG_NAME}.`;
            
            const { data: pr } = await github.rest.pulls.create({
              owner, repo, head: 'develop', base, title, body
            });
            
            core.info(`PR criado: ${pr.number}`);
          env:
            TAG_NAME: ${{ needs.release-please.outputs.tag_name }}
