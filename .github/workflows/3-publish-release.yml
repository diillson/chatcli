name: Publish Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: publish-release-main
  cancel-in-progress: true

jobs:
  publish_release:
    name: Create GitHub Tag and Release
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.rp.outputs.tag_name }}
      release_created: ${{ steps.rp.outputs.release_created }}
      release_sha: ${{ steps.rp.outputs.release_sha }}

    steps:
      - name: Run Release Please to create release
        id: rp
        uses: google-github-actions/release-please-main@v4
        with:
          # Agora, o comando é para criar o release no GitHub
          command: github-release
          release-type: go
          token: ${{ secrets.GH_RELEASE_TOKEN }}

  build_and_upload:
    name: Build and upload binaries
    needs: [publish_release]
    if: needs.publish_release.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.publish_release.outputs.tag_name }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build binaries
        env:
          CGO_ENABLED: 0
          TAG_NAME: ${{ needs.publish_release.outputs.tag_name }}
        run: |
          # ... (seu script de build aqui, sem alterações)
          set -euo pipefail
          COMMIT_HASH=$(git rev-parse --short HEAD)
          BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          VERSION="$TAG_NAME"
          LDFLAGS="-X 'github.com/diillson/chatcli/version.Version=${VERSION}' -X 'github.com/diillson/chatcli/version.CommitHash=${COMMIT_HASH}' -X 'github.com/diillson/chatcli/version.BuildDate=${BUILD_DATE}'"
          GOOS=linux   GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o chatcli-linux-amd64       ./main.go
          GOOS=darwin  GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o chatcli-darwin-amd64      ./main.go
          GOOS=darwin  GOARCH=arm64 go build -ldflags="${LDFLAGS}" -o chatcli-darwin-arm64      ./main.go
          GOOS=windows GOARCH=amd64 go build -ldflags="${LDFLAGS}" -o chatcli-windows-amd64.exe ./main.go

      - name: Upload assets
        env:
          GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
          TAG_NAME: ${{ needs.publish_release.outputs.tag_name }}
        run: |
          # ... (seu script de upload aqui, sem alterações)
          gh release upload "$TAG_NAME" chatcli-*-* --clobber

  sync_main_to_develop:
    name: Sync release commit back to develop
    needs: [publish_release]
    if: needs.publish_release.outputs.release_created == 'true' && needs.publish_release.outputs.release_sha != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_RELEASE_TOKEN }}
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Cherry-pick release commit onto develop
        run: |
          set -euo pipefail
          git checkout develop
          git pull origin develop
          echo "Cherry-picking commit ${{ needs.publish_release.outputs.release_sha }} onto develop..."
          git cherry-pick ${{ needs.publish_release.outputs.release_sha }}
          echo "Pushing updated develop branch..."
          git push origin develop
